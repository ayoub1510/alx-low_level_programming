!<arch>
0-isupper.c/    0           0     0     644     200       `
#include "main.h"

/**
 * _isupper - upper checker
 * Return: 1 if upper, else 0
 * @c: is an input
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     235       `
#include "main.h"

/**
 * *_memset - constant var
 * @s: char
 * @b: char
 * @n: int
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     277       `
#include "main.h"

/**
 * *_strcat - add
 * @dest: destination
 * @src: source
 * Return: results
 */

char *_strcat(char *dest, char *src)
{
	int i = 0, lnt = 0;

	while (dest[i])
	{
		lnt++;
		i++;
	}
	for (i = 0; src[i]; i++)
	{
		dest[lnt++] = src[i];
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     435       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - ascii to int
 * @s: input
 * Return: result
 */

int _atoi(char *s)
{
	int i = 0, sign = 1;

	unsigned int num = 0;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
		{
			sign = -1;
		}
		else if (s[i] == '+')
		{
			sign = 1;
		}
		if ((s[i] <= '9') && (s[i] >= '0'))
		{
			num = (num * 10) + (s[i] - '0');
		}
		else if (num > 0)
		{
			break;
		}
		i++;
	}
	return (num * sign);
}

1-isdigit.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _isdigit - checker
 * Description: "checks for a digit"
 * @c: is an input
 * Return: 1 if its a digit,otherwise 0
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     245       `
#include "main.h"

/**
 * *_memcpy - copy mm
 * @dest: char
 * @src: char
 * @n: int
 * Return: s
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     308       `
#include "main.h"

/**
 * *_strncat - conca two string
 * @dest: dest
 * @src: src
 * @n: bytes
 * Return: void
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0, len = 0;

	while (dest[i])
	{
		i++;
		len++;
	}
	for (i = 0; src[i] && i < n; i++)
	{
		dest[len++] = src[i];
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     226       `
#include "main.h"

/**
 * *_strchr - locate
 * @s: char
 * @c: char
 * Return: s
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}


	return ('\0');
}
2-strlen.c/     0           0     0     644     156       `
#include "main.h"

/**
 * _strlen - length
 * @s: char
 * Return: length
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i])
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     320       `
#include "main.h"

/**
 * *_strncpy - main
 * @dest: dest
 * @src: src
 * @n: int
 * Return: void
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0, len = 0;

	while (src[i++])
		len++;

	for (i = 0; src[i] && i < n; i++)
		dest[i] = src[i];

	for (i = len; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     228       `
#include "main.h"
/**
 * _islower - Entry
 * Description: "checks lowercase"
 * @c: is a character
 * Return: 1 if its lower, else return 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     181       `
#include "main.h"

/**
 * _puts - puts
 * @str: string
 * Return: void
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     203       `
#include "main.h"

/**
 * *_strcmp - main
 * @s1: s1
 * @s2: s2
 * Return: void
 */

int _strcmp(char *s1, char *s2)
{
	while ((*s1 && *s2) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

4-isalpha.c/    0           0     0     644     328       `
#include "main.h"
/**
 * _isalpha - alph checker
 * Description: "checks if its an alphabetic char or not"
 * @c: c is a testing character
 * Return: 1 if its a letter, otherwise return 0
 */
int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     263       `
#include "main.h"

/**
 * *_strpbrk - srch
 * @s: char
 * @accept: char
 * Return: byt
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}

		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     676       `
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 * If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}	
6-abs.c/        0           0     0     644     210       `
#include "main.h"
/**
 * _abs - absolutly
 * Description: "prints the absolute value"
 * @i: is an input that will be checked
 * Return: i
 */
int _abs(int i)
{
	if (i < 0)
	{
		i = (i * -1);
	}
	return (i);
}
9-strcpy.c/     0           0     0     644     246       `
#include "main.h"

/**
 * *_strcpy -  cpy
 * @dest: dest
 * @src: src
 * Description: "copy"
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];
	} while (src[i] != '\0');

	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     265       `
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

